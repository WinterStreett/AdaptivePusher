#include <iostream>
#include <string>
#include <fstream>
#include <regex>
#include <ctime>
#include<chrono>
#include <sys/stat.h> // struct stat
#include <cstdio>
std::string getUnixTimestamp() {
    auto now = std::chrono::system_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::seconds>(now.time_since_epoch());
    return std::to_string(duration.count());
}

std::string addTimestampToMetrics(const std::string& rawMetrics) {
    std::string result;
    std::istringstream input(rawMetrics);
    std::string line;

    while (std::getline(input, line)) {
        if (line.empty() || line[0] == '#') {
            // 忽略注释行和空行
            result.append(line).append("\n");
            continue;
        }
        line.append(" ").append(getUnixTimestamp());
        result.append(line).append("\n");
    }
    return result;
}

void readBinaryFileToString(const std::string& fileName, std::string& buffer)
{
    std::ifstream file;
    file.open(fileName,std::ios::binary | std::ios::in);
    if (!file.is_open()) {
        throw std::runtime_error("fun: readBinaryFileToString: Failed to open the file for reading.");
    }
    size_t length;
    file.read(reinterpret_cast<char*>(&length), sizeof(length));

    buffer.resize(length, '\0');    // 为字符串分配足够的空间
                   
    file.read(&buffer[0], length);             // 将文件内容读取到字符串中
    file.close();
}

void writeStringToBinaryFile(const std::string& fileName, std::string& data)
{
    std::ofstream file;

    file.open(fileName,std::ios::binary | std::ios::out);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open the file for writing.");
    }
    size_t length = data.size();
    file.write(reinterpret_cast<const char*>(&length), sizeof(length));
    file.write(data.data(), data.size());
    file.close();
}

// 通过stat结构体 获得文件大小，单位字节
size_t getFileSize1(const char *fileName) {

	if (fileName == NULL) {
		return 0;
	}
	
	// 这是一个存储文件(夹)信息的结构体，其中有文件大小和创建时间、访问时间、修改时间等
	struct stat statbuf;

	// 提供文件名字符串，获得文件属性结构体
	stat(fileName, &statbuf);
	
	// 获取文件大小
	size_t filesize = statbuf.st_size;

	return filesize;
}


std::string addLabel(const std::string& original, const std::string& newLabelKey, const std::string& newLabelValue) {
    // 找到标签部分的开始位置
    size_t start = original.find('{');
    size_t end = original.find('}', start);

    // 如果找到了标签部分，插入新标签
    if (start != std::string::npos && end != std::string::npos) {
        std::string newLabel = newLabelKey + "=\"" + newLabelValue + "\"";
        std::string updated = original;
        updated.insert(end, "," + newLabel);
        return updated;
    }

    // 如果没有标签部分，则在数据名后添加整个标签
    size_t spacePos = original.find(' '); // 查找第一个空格
    if (spacePos != std::string::npos) {
        // 在空格前插入标签
        return original.substr(0, spacePos) + "{" + newLabelKey + "=\"" + newLabelValue + "\"}" +
               original.substr(spacePos);
    }

    // 如果没有空格，则假设原始数据只有名字
    return original + "{" + newLabelKey + "=\"" + newLabelValue + "\"}";
}

int main() {
    std::string data = R"(test_metrics)";
    std::cout<< addLabel(data,"label2","def")<<std::endl;
    return 0;
}