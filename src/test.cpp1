#include <iostream>
#include <string>
#include <fstream>
#include <regex>
#include <ctime>
#include<chrono>
std::string getUnixTimestamp() {
    auto now = std::chrono::system_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::seconds>(now.time_since_epoch());
    return std::to_string(duration.count());
}

std::string addTimestampToMetrics(const std::string& rawMetrics) {
    std::string result;
    std::istringstream input(rawMetrics);
    std::string line;

    while (std::getline(input, line)) {
        if (line.empty() || line[0] == '#') {
            // 忽略注释行和空行
            result.append(line).append("\n");
            continue;
        }
        line.append(" ").append(getUnixTimestamp());
        result.append(line).append("\n");
    }
    return result;
}

void readBinaryFileToString(const std::string& fileName, std::string& buffer)
{
    std::ifstream file;
    file.open(fileName,std::ios::binary | std::ios::in);
    if (!file.is_open()) {
        throw std::runtime_error("fun: readBinaryFileToString: Failed to open the file for reading.");
    }
    size_t length;
    file.read(reinterpret_cast<char*>(&length), sizeof(length));

    buffer.resize(length, '\0');    // 为字符串分配足够的空间
                   
    file.read(&buffer[0], length);             // 将文件内容读取到字符串中
    file.close();
}

void writeStringToBinaryFile(const std::string& fileName, std::string& data)
{
    std::ofstream file;

    file.open(fileName,std::ios::binary | std::ios::out);
    if (!file.is_open()) {
        throw std::runtime_error("Failed to open the file for writing.");
    }
    size_t length = data.size();
    file.write(reinterpret_cast<const char*>(&length), sizeof(length));
    file.write(data.data(), data.size());
    file.close();
}

int main() {
    std::string fileName = "../bin/data.bin";
    std::string data = R"(test_metric{label="test"} 123 100200030)";
    writeStringToBinaryFile(fileName,data);
    std::string buffer;
    readBinaryFileToString(fileName,buffer);
    std::cout<<buffer<<std::endl;
    return 0;
}