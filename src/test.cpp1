#include <iostream>
#include <string>
#include <fstream>
#include <regex>
#include <ctime>
#include<chrono>
std::string getUnixTimestamp() {
    auto now = std::chrono::system_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::seconds>(now.time_since_epoch());
    return std::to_string(duration.count());
}

std::string addTimestampToMetrics(const std::string& rawMetrics) {
    std::string result;
    std::istringstream input(rawMetrics);
    std::string line;

    while (std::getline(input, line)) {
        if (line.empty() || line[0] == '#') {
            // 忽略注释行和空行
            result.append(line).append("\n");
            continue;
        }
        line.append(" ").append(getUnixTimestamp());
        result.append(line).append("\n");
    }
    return result;
}
int main() {
//     // 模拟从 node_exporter 获取的原始数据
//     std::string rawMetrics = R"(# HELP node_cpu_seconds_total Seconds the CPUs spent in each mode.
// # TYPE node_cpu_seconds_total counter
// node_cpu_seconds_total{cpu="0",mode="user"} 12345.67
// node_cpu_seconds_total{cpu="0",mode="system"} 2345.67
// )";

//     std::string updatedMetrics = addTimestampToMetrics(rawMetrics);
//         // 输出处理后的数据
//     std::cout << updatedMetrics;
    // std::cout<<std::to_string(getUnixTimestamp())<<std::endl;

    std::string content = R"(456)";
    std::fstream file;
    // file.open("test.txt", std::ios::in | std::ios::app);
    file.open("test.txt",std::ios::out | std::ios::trunc);
    if (!file.is_open()) {
        std::cerr << "Failed to open the file." << std::endl;
        return 1;
    }
    file << content;
    file.close();

    return 0;
}